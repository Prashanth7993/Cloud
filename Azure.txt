Azure Cloud:
What is Cloud?
Cloud computing is the on-demand delivery of computing services—such as servers, storage, databases, networking, software, and analytics—over the internet.

Azure cloud Services:
IaaS ( Infrastructure as a service )
SaaS ( Software as a service  )
PaaS ( Platform as a Service )


IaaS
In an IaaS model, the cloud provider is responsible for maintaining the hardware, network connectivity (to the internet), and physical security.
In the Infrastructure as a Service (IaaS) model, the cloud provider takes care of the underlying physical infrastructure, and you (the user) are responsible for managing almost everything that sits on top of that infrastructure.
Scalability changing demands can be done.
Self service ( bicet, arm template, terraform  ) 
like we can create any service by using biceps & arm template & portal       azure .com 
Virtualization
Multi-tenancy ( sharing among multiple users while ensuring logical isolation and security for each tenant. )


PaaS
PaaS offers a platform allowing customers to develop, run, and manage applications without dealing with the underlying infrastructure.​
It streamlines the development process, enabling developers to focus on application logic rather than infrastructure management.​
SaaS
SaaS delivers software applications over the internet on a subscription basis.​
It provides users with access to software without the need for installation or maintenance, reducing costs and complexity.​


Deployment Models?
Public Cloud: Services are delivered over the public internet and shared across organizations.​
Private Cloud: Services are maintained on a private network, offering greater control and security.​
Hybrid Cloud: Combines public and private clouds, allowing data and applications to be shared between them.
Isolated:
Isolation primarily refer to the separation of network traffic within and between Vnets.
Vnet:
In a cloud provider network an Vnet is logically isolated section, where they can allow us to launch and manage (such as vm,etc).
In Vnet only allowed resources will be running not other resources will come into it, it will only when we allow then into that Vnet.
In Vent we have some address spaces that contains a range of Ip address where all the resources inside the Vnet will use. Each resource need an Unique IP address. So they can talk to each other.

Step 1: Clarifying VNet vs. Subnets

The VNet’s address space (10.0.0.0/16) is the entire backyard, with 65,536 IP addresses.
Subnets are smaller sections of that backyard, like little gardens, each with its own smaller range of IP addresses (e.g., 10.0.1.0/24, which has 256 addresses).
The /16 in 10.0.0.0/16 describes the VNet’s total range, not a subnet. Subnets typically use a higher number, like /24 or /28, to carve out smaller chunks.
Quick Check: Does it make sense that the VNet (10.0.0.0/16) is the whole backyard, and subnets are smaller pieces (like 10.0.1.0/24) inside it? If this is clear, we’ll move on to how subnets work. If not, let me know, and I’ll rephrase!

Step 2: Why Do We Need Subnets?
Imagine your backyard (VNet) is huge, and you want to organize it better. You don’t want all your toys (resources like web servers, databases, etc.) scattered everywhere. Instead, you create smaller sections (subnets) for different purposes.

Example:
One garden (subnet) for web servers (e.g., 10.0.1.0/24).
Another garden for databases (e.g., 10.0.2.0/24).

Why?:
Organization: Keeps things tidy—web servers in one place, databases in another.
Security: You can put a fence (security rules) around each garden to control who gets in or out. For example, only web servers can talk to databases, not the internet.
Efficiency: Makes it easier to manage lots of resources.
Question for you: Can you picture your VNet’s backyard with smaller gardens (subnets) for different types of resources, like one for web servers and one for databases? Does this idea of organizing and securing resources make sense? Let me know if you’re with me!

Step 3: How Subnets Use the VNet’s Address Space
Let’s go back to your VNet (10.0.0.0/16), which has 65,536 IP addresses. You decide to create two subnets:

Subnet A: For web servers, using 10.0.1.0/24 (256 IP addresses).
Subnet B: For databases, using 10.0.2.0/24 (256 IP addresses).

What Does /24 Mean?
The /24 in 10.0.1.0/24 means the first 24 bits of the IP address are fixed, and the last 8 bits can change.
Since 8 bits can make 2^8 = 256 combinations, this subnet has 256 IP addresses (from 10.0.1.0 to 10.0.1.255).
Same for Subnet B (10.0.2.0/24): another 256 addresses (10.0.2.0 to 10.0.2.255).

What Happens to the VNet’s Addresses?
Each subnet takes a chunk of the VNet’s 65,536 addresses.
Subnet A uses 256 addresses, Subnet B uses another 256, so together they use 512 addresses.
You still have 65,536 - 512 = 65,024 addresses left to create more subnets or assign to other resources.
Fun Fact: In real cloud setups (like Azure), a few IP addresses in each subnet are reserved (e.g., for network management), so you might get 251 usable addresses out of 256.

The Four Levels of Azure Resource Hierarchy
Management Groups
This is the top level of the hierarchy. Think of it like the headquarters of a company. Management Groups let you group multiple subscriptions together under one umbrella. This makes it easier to apply the same policies (like security or compliance rules) and manage permissions across all those subscriptions at once.
Example: Imagine a big company with subscriptions for different regions or departments. A Management Group ties them all together so the company can enforce consistent rules across everything.
Subscriptions
Subscriptions are the next level down, kind of like departments in a company. Each subscription is a logical container for your resources, helping you separate different environments (like production vs. development), departments, or projects. They’re also key for billing, so you can track costs for specific parts of your organization.
Example: A company might have one subscription for its live production apps and another for testing in development. This keeps the costs and access separate and manageable.
Resource Groups
These sit inside subscriptions and are like teams within a department. A Resource Group is a container that holds related resources—like virtual machines, databases, or storage accounts—that work together for a specific application or project. Grouping them makes it easier to manage their lifecycle (deploying, updating, or deleting them) as a unit.
Example: For a web app, you might have a Resource Group that includes the web server, a database, and some storage. Managing them together simplifies everything.
Resources
These are the individual pieces at the bottom level—like the workers or tools in our company analogy. Resources are the actual services you use in Azure, such as virtual machines, databases, or storage accounts. Each one lives inside a Resource Group and does the actual work for your applications.
Example: A virtual machine running your web server or a SQL database storing your app’s data are both Resources.

What is a Tenant in Azure?
A tenant in Azure is the top-level container for your cloud environment. Technically, it’s a dedicated instance of Azure Active Directory (Azure AD), which is Microsoft’s identity and access management service. Here’s what that means in simple terms:

Identity Hub: The tenant is where all your users, groups, and applications are managed. It’s the central place for controlling who can access your Azure resources.
Isolation: Each tenant is completely separate from others, keeping your data and resources secure and private.

Starting Point: When you sign up for Azure, you get a tenant automatically. If you’re with a company, your organization likely has its own tenant that you work within.

az login
 az --version
 az account list
 az account list --output table
 az account list --output yaml
 az account list --output json
 az config set defaults.location="eastus"
 az config set defaults.group="gowriRG"
 az account list
 az account set --subscription "bf7e75db-e819-49ca-b6d2-69c32a2353fe"
 az group list
 az group list --help
  az group list --query "[?location=='eastus']"
  az group list --query "[?name=='gowrirRG']"
  az group list --query "[].name" --output tsv
  az group list --query "[].name" --output tsv | grep gowriRG
  az group list --query "[].name" --output tsv >> abc.txt
  az config get defaults
  az vm list
  az vm list -g Admin-Azure --query "[].name" --output tsv
  az vm list -g Admin-Azure --query "[].{Name:name}" --output tsv
  az vm list -g Admin-Azure --query "[].{Name:name, ResourceGroup:resourceGroup}" --output tsv
  az storage account list
  az storage account list -g NewVilasRG
az storage account list -g gowriRG
env | grep -i storage


PowerShell Commands

Connect-AzAccount
Connect-AzAccount -UseDeviceAuthentication
get-AzContext
set-AzContext -Subscription "bf7e75db-e819-49ca-b6d2-69c32a2353fe"
get-AzSubscription
Get-AzResourceGroup
Get-AzResourceGroup --help
get-AzResourceGroup -Location centralindia
get-AzResourceGroup -Name gowriRG
get-AzVM -ResourceGroupName gowriRG
 get-AzVM
 remove-AzVM 
 new-AzvM -ResourceGroupName gowriRG -Location centralindia
get-AzVM
 
we create a VM and set the OS disk and NIC to be deleted when we delete the VM.

New-AzVm -ResourceGroupName "myResourceGroup" -Name "myVM" -OSDiskDeleteOption Delete -NetworkInterfaceDeleteOption Delete -Location "East US" -VirtualNetworkName "myVnet" -SubnetName "mySubnet" -SecurityGroupName "myNetworkSecurityGroup" -PublicIpAddressName "myPublicIpAddress"

Difference Between Active Directory Domain Service & Microsoft Entra ID.
What Are They?

AD DS (Active Directory Domain Services): This is a traditional system for managing users, computers, and resources in an on-premises network (think of a company’s internal network with physical servers). It’s part of the broader Active Directory family but focuses on being a directory service.

Microsoft Entra ID: This is a cloud-based identity solution designed for internet-based applications and services, like Microsoft 365 or third-party apps (e.g., Facebook logins). It’s not just a cloud version of AD DS—it’s built differently for modern, online needs.

Both help manage “who you are” (identity) in a system, but they work in different environments and have unique features.
Example to Understand the Difference
Imagine you run a company called TechCorp with 100 employees. Here’s how AD DS and Microsoft Entra ID would work for you:
Scenario 1: Using AD DS On-Premises
Setup: You have a physical office with Windows servers and desktops. You install AD DS on a server to manage everything.
What happens:
You create an OU called “Sales” for your sales team and set a GPO to enforce a 90-day password reset policy for them.
Employee Sarah logs into her office desktop. AD DS uses Kerberos to verify her identity securely within the company network.
You use LDAP to search for all Sales team members in the directory.
Sarah’s desktop is a “computer object” in AD DS, tied to the domain (e.g., techcorp.local).
Purpose: AD DS controls the internal network, ensuring all devices and users follow company rules.
Key Characteristics:
AD DS
Where it lives: On-premises (on physical or virtual servers in your company).
Structure: Hierarchical (like a tree with branches), using Organizational Units (OUs) to organize users and Group Policy Objects (GPOs) to set rules (e.g., password policies).
How it works: Uses LDAP (a protocol to query the directory) and Kerberos (for secure authentication).
Features: Manages computer objects (e.g., desktops joined to the network) and uses trusts between domains for collaboration.
Example use: Controlling an internal company network.
Scenario 2: Using Microsoft Entra ID in the Cloud
Setup: TechCorp starts using Microsoft 365 (e.g., Teams, Outlook online) and a web app like Dropbox. You use Microsoft Entra ID to manage access to these cloud services.
What happens:
Sarah’s account syncs from AD DS to Microsoft Entra ID so she can use the same username and password.
She logs into Microsoft Teams from her laptop (at home or the office) using OpenID Connect, not Kerberos, because it’s over the internet.
There’s no “Sales” OU or GPO—her account is just in a flat list of users and groups.
You query her account details using a REST API, not LDAP, because it’s cloud-based.
She also logs into Dropbox using her TechCorp credentials, thanks to federation with Microsoft Entra ID.
Purpose: Microsoft Entra ID handles identity for cloud and web apps, even outside the office


Microsoft Entra ID P1 and P2
These plans are designed to enhance security
Entra ID P1 and P2 are premium licensing tiers of Microsoft Entra ID that unlock additional functionality beyond the basic (Free) version. These plans are designed to enhance security, streamline identity management, and support hybrid environments where organizations use both cloud and on-premises resources. They can be 

purchased as standalone licenses or as part of the Microsoft Enterprise Mobility + Security (EMS) suite, which also includes Azure Information Protection and Intune.
P1: Provides a robust set of features focused on secure access, self-service capabilities, and hybrid identity integration.
P2: Builds on P1 by adding advanced identity protection and privileged access management, catering to organizations with heightened security and compliance needs.
Microsoft offers a free trial for P2, allowing organizations to test its full functionality before committing to a purchase.

Entra ID Protection (P2 only): Adds risk-based conditional access and user behavior monitoring, making it ideal for proactive threat prevention.
Privileged Identity Management (P2 only): Focuses on securing administrative roles, reducing the risk of privilege misuse or overexposure.


